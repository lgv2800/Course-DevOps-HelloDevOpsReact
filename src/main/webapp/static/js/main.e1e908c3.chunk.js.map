{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","match","console","log","params","text","Button","onClick","window","history","pushState","variant","App","path","component","render","className","src","logo","alt","Container","Row","Col","xs","Form","Group","controlId","Control","type","placeholder","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,wPC+C3C,IAAMC,EAAQ,SAAC,GAAY,IAAXC,EAAU,EAAVA,MAEZ,OADAC,QAAQC,IAAIF,GACL,6BACH,qCAAWA,EAAMG,OAAOC,MACxB,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAKC,OAAOC,QAAQC,UAAU,IAAK,yBAA0B,gBAAgBC,QAAQ,aAAtG,4BAIOC,EA3Cf,WACE,OACA,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAM,SAAUC,UAAWd,IAClC,kBAAC,IAAD,CAAOa,KAAM,eAAgBC,UAAWd,IACxC,kBAAC,IAAD,CAAOe,OAAQ,kBAAK,uCAGxB,yBAAKC,UAAU,OACf,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,iDACA,mEACA,oDACA,kDAEA,0BAAMH,UAAU,YACd,kBAACI,EAAA,EAAD,KACI,6BACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAG,kBAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBAC9B,kBAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,QAAQC,YAAY,sBAE3C,kBAACP,EAAA,EAAD,CAAKC,GAAI,GAAG,kBAACjB,EAAA,EAAD,CAAQK,QAAQ,WAAhB,iBCxBdmB,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAAS/B,MACvB,2DCZNgC,IAASlB,OAAO,kBAAC,EAAD,MAASmB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e1e908c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport {Button, Form, Row, Container, Col} from 'react-bootstrap';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\n\n//import GiraffeStore from \"./stores/GiraffeStore\";\nimport './App.css';\n\n//const giraffeStore = new GiraffeStore();\n\nfunction App() {\n  return (\n  <HashRouter>\n      <Switch>\n          <Route path={\"/about\"} component={About}/>\n          <Route path={\"/about/:text\"} component={About}/>\n          <Route render={()=> <h1>404</h1>}/>\n      </Switch>\n\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>HelloDevOps React</h1>\n        <p>Kursus - Kompleksesystemer og DevOps</p>\n        <p>Lesson 03 - React app</p>\n        <p>23. September 2019</p>\n      </header>\n        <body className=\"App-body\">\n          <Container>\n              <div>\n                  <Row>\n                      <Col xs={6}><Form.Group controlId=\"formBasicEmail\">\n                          <Form.Control type=\"email\" placeholder=\"Enter name here\" />\n                      </Form.Group></Col>\n                      <Col xs={6}><Button variant=\"primary\">Enter</Button></Col>\n                  </Row>\n\n              </div>\n      </Container>\n        </body>\n    </div>\n  </HashRouter>\n  );\n}\n\nconst About = ({match})=> {\n    console.log(match)\n    return <div>\n        <h1>About {match.params.text}</h1>\n        <Button onClick={()=> window.history.pushState(\"/\", \"Modified browser entry\", \"about:blank\")} variant=\"secondary\">Modify browser history</Button>\n    </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}